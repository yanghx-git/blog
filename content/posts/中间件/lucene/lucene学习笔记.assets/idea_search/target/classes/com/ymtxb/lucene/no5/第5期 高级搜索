第1部分 搜索结果排序
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    默认情况下，Lucene采用的排序规则为“相关性降序排列”，这样就使得关联性最高的文档排在最前面。这种默认策略在一般场景下很好用，
因为它尽可能的使用户能够在前几个出现的搜索结果中找到自己所需的文档。然而，用户也经常需要基于特定规则实现排序。
    比如说，你到京东商城搜索商品，你可能需要按照热度、价格等等规则去排列搜索页数据。当然，你可以通过Lucene以外的程序来完成排序，
但是在搜索结果比较大时，使用这种方案会带来性能问题。本节课程咱们来学习下Lucene提供的内置解决方案。

-> 根据值域进行排序
    IndexSearch提供了很多可重载的search方法，到目前为止，我们只接触了 search(query,int)方法，它返回的是按照相关性降序排列
的结果。这节课，咱们认识一个重载的search方法search(query,int,Sort)方法即可。
    注意，传递了Sort对象参数之后，search方法将不再进行任何评分操作了（因为没意义了），并且评分操作会消耗大量的系统性能。如果即要
按照Sort排序 又要 评分操作，可以使用search(query,int,Sort, boolean, boolean) 方法即可。第一个 boolean 参数为 doDocScores，
表示是否做评分，第二个boolean参数为doMaxScore，暂且不管它（传false）。
    （demo1：SortingExample）

--> 按照相关性进行排序
    Lucene默认的排序方式即相关性降序排列。该方式可以通过Sort对象参数设置为Null 或者 new Sort() 【不做任何处理】 或者 Sort.RELEVANCE
都等效。
    example.displayResults(query, Sort.RELEVANCE);
    example.displayResults(query, new Sort());
    example.displayResults(query, null);

--> 按照索引顺序进行排序
    如果希望根据文档的索引顺序进行排列，可以在searcher方法中使用Sort.INDEXORDER作为参数：
    example.displayResults(query, Sort.INDEXORDER);

    搜索结果是按照ID升序排列，其实索引顺序是一种没啥实际用途的排序规则。咱们使用搜索，更注重的是搜索匹配度！

--> 通过域进行排序
    通过文本域排序要求被排序的域整个被索引成单个语汇单元（即使用 StringField）。
    API使用示例：
    example.displayResults(query, new Sort(new SortField("category", SortField.Type.STRING)));
    该实例按照“category”域字母升序排列。

--> 倒排序
    默认情况下，Lucene针对域的排序方向使用的是自然排序方式。自然排序会对相关性按照降序排列，但对基于域排序的按照升序排列。
    针对每个域的自然排序方式都可以进行降序处理。示例：查询最新出版的书籍目录
    example.displayResults(allBooks, new Sort(new SortField("pubmonth", SortField.INT, true)));
    SortField最后一个参数 true ，表示反转顺序。

--> 通过多个域进行排序
    很常见的需求，比如查询你想按照 价格 + 销量 排列。可以通过传入多个SortFields来实现通过多个域排序。
    示例：1. 按照类别域的字母升序作为主要排序规则 2. 相同类别的书籍按照评分进行排序 3. 评分相同的按照出版时间降序排序
    example.displayResults(query,
        new Sort(new SortField("category", SortField.Type.STRING)),
        SortField.FIELD_SCORE,
        new SortField("pubmonth", SortField.Type.INT, true)
    );

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第2部分 MultiPhraseQuery
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    MultiPhraseQuery与PhraseQuery功能类似，区别在于MultiPhraseQuery允许在同一个位置上针对多个项的匹配。当然，使用PhraseQuery联合
BooleanQuery也可以实现该功能，但是查询成本不一样。相对来说MultiPhraseQuery性能更好一些。
    示例：查询speedy fox 相关的所有文档。
    (demo:MultiPhraseQueryTest)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第3部分 多个域的一次性查询
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    如果我们想让查询条件匹配多个域，怎么做？一般有两种方案
    方案1：创建文档时添加一个全包含域，缺点：浪费空间。
    方案2：使用BooleanQuery
    方案3：使用MultiFieldQueryParser。
    (demo:MultiFieldQueryParserTest)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第4部分 跨度查询
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    场景：查询靠近短语“President Obama”且包含短语“health care reform”的文档。
    在这之前，咱们学习的查询api都不太适用于针对上述短语的位置感知查询。例如使用BooleanQuery联合两个PhraseQuery，得到的结果
    可能两个短语相距非常远...

-> SpanQuery家族
1. SpanTermQuery            和其它跨度查询类型结合使用，单独使用时相当于TermQuery
2. SpanFirstQuery           用来匹配域中首部分的各个跨度
3. SpanNearQuery            用来匹配临近的跨度
4. SpanNotQuery             用来匹配不重叠的跨度
5. SpanOrQuery              跨度查询的聚合匹配

-> SpanQuery 测试框架（demo：SpanQueryTest）

-> SpanTermQuery
    功能上来说类似于普通的TermQuery，但是使用SpanTermQuery会将匹配文档的“项”位置信息提取出来。
    示例：
    SpanWeight weight = query.createWeight(searcher, false);
    TopDocs hits = searcher.search(spanTermQuery, 10);
    Spans spans = weight.getSpans(reader.getContext().leaves().get(0), SpanWeight.Postings.POSITIONS);

    Spans：每一个匹配的文档，在Spans内都有一组数据。文档ID，startPosition，endPosition，使用nextStartPosition()方法
    进行游标。

-> SpanFirstQuery （域的起点开始跨度查询）
   示例：
   the quick brown fox jumps over the lazy dog

   参数1：SpanTermQuery
   参数2：从开始位置到结束位置的跨度
   SpanFirstQuery sfq = new SpanFirstQuery(brown, 2);
   描述：查询"brown"关键字，查询区间为 "the quick"，很明显在这个区间内是无法查找到结果的。

-> SpanNearQuery
   作用：类似于PhraseQuery，但是使用起来比PhraseQuery的slop参数简单很多。

-> SpanNotQuery
   作用：结合SpanNearQuery使用，提供跨度查询过程中排除指定 Term 的查询。

-> SpanOrQuery
   作用：组合一组SpanQuery，类似BooleanQuery。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）
第5部分 使用功能查询实现自定义评分
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    继承CustomScoreQuery，就可以实现自定义评分查询。在实现的CustomScoreQuery内复写 getCustomScoreProvider 方法，返回一个CustomScoreProvider实例。
    继承CustomScoreProvider，复写customScore方法，就可自定义评分了。
    （demo: CustomScoreTest）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第6部分 针对多索引的搜索
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
    一些系统需要保持多个分离的Lucene索引，但是查询时需要对这几个索引的数据做合并再输出。例如：新闻网站可能会每个月创建一个新的索引...

-> （demo：MultiReaderTest）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）
