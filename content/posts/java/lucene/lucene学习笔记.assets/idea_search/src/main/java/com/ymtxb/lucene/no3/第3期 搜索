第1部分 实现简单的搜索
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）

-> Lucene主要的搜索API
|---------------|---------------------------------------------------------------------------|
|     类                               目的
|---------------|---------------------------------------------------------------------------|
|IndexSearcher  |搜索索引的门户。所有搜索都通过IndexSearcher进行，他们会调用该类中重载的search方法
|Query          |封装某种查询类型的具体子类。Query实例将被传递给IndexSearch的search方法
|QueryParser    |将用户输入的（可读的）查询表达是处理成具体的Query对象
|TopDocs        |保持由IndexSearcher.search()方法返回的具有较高评分的顶部文档
|ScoreDoc       |提供对TopDocs中每条搜索结果的访问接口
|---------------|---------------------------------------------------------------------------|
我们查询Lucene索引时，将返回给你一个包含有序的ScoreDoc数组的TopDocs对象。Lucene会计算每个文档的评分（表示搜索相关性的数值）。
ScoreDoc对象自身不存储匹配的文档数据，当需要被匹配文档时，可以通过ScoreDoc.doc (文档ID) 来进行匹配。

-> 对特定项的搜索
项，由一个字符串类型的域值和对应的域名组成
注意：原始文本经过分析器分析之后形成若干个项，分析器有可能会剔除一些项（比如 停用词）、或把各个项转换成小写形式、
或将项转换成其基本形式（词干）、或插入一些附加项（同义词）。针对特定项的查询，传递给IndexSearch类的项应该与索引
操作期间由分析器生成的项匹配！
（demo : BasicSearchingTest.testTerm()）

-> 解析用户输入的查询表达式：QueryParser
Lucene 的搜索方法（indexSearcher.search(..)）需要一个query对象作为参数。对查询表达式的解析实际上是将
用户输入的查询语句比如 “mock OR junit” 转换为对应的Query实例的过程。
过程如下图：
                               Query Object
Expression -----> QueryParser ----------------> IndexSearcher
                      |
                      | 分词
                      |
                   Analyzer
(Demo : BasicSearchingTest.testQueryParser())
如代码所示，QueryParser 类需要使用一个分析器把查询语句分割成多个项。在第一个查询表达式中（"+JUNIT +ANT -MOCK"），
字母都是大写的，contents域中的项在索引时（StandardAnalyzer）都被转换为了小写形式。本例中，SimpleAnalyzer该分析器
在构造Query对象之前就把各个项转换为了小写形式。

QueryParser类的使用
QueryParser parser = new QueryParser(String field, Analyzer Analyzer);
                                               |                |
                                            默认域名            分析器
域名参数是指所有被搜索项所对应的默认域，即你不指定域名的话，则生成的query对象默认搜索创建parser时指定的域名。
使用parser时也可以强制指定搜索域，如：parser.parse("field:text");
遇到不能正常解析的“查询表达式”，Lucene会抛出一个ParseException异常，需要去捕获它，不要将该异常抛给用户。

QueryParser处理基本查询表达式
|---------------------------------------|-------------------------------------------------------------------------|
 查询表达式                                                  匹配文档
 java                                           默认域包含java的项文档

 java junit                                     默认域包含java和junit中一个或者两个的文档
 java OR junit

 +java +junit                                   默认域中同时包含java和junit文档
 java AND junit

 title:ant                                      title域中包含ant项的文档

 title:extreme -subject:sports                  title域中包含extreme且subject域中不包含sports的文档
 title:extreme AND NOT subject:sports

 (agile OR extreme) AND methodogy               默认域中包含methodogy且包含agile和extreme中的一个域或者两个的文档

 title: "junit in action"                       title域包含junit in action短语的文档

 title: "junit action"~5                        title域中junit和action之间距离小于5的文档

 java*                                          包含java开头的项的文档，例如javaspaces，javaserver,javascript和java本身

 lastmodified:[1/1/21 TO 12/31/21]              lastmodified域值在2021年1月1日和2021年12月31日之间的文档
|---------------------------------------|-------------------------------------------------------------------------|

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）


第2部分 IndexSearcher类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
-> 创建IndexSearcher实例
工作的大致流程：
        Query -------> IndexSearcher --------> TopDocs
                            ↓
                        IndexReader
                            ↓
                        Directory
                            ↓
                          索引库

第一步：我们需要一个用于索引的目录，大多数情况下我们搜索的索引都是存在于文件系统的
Directory dir = FSDirectory.open(new File("/path/to/index").toPath());
第二步：创建一个用于访问dir索引资源的indexReader
IndexReader reader = IndexReader.open(dir);
第三步：创建用于搜索的门户实例IndexSearcher
IndexSearcher searcher = new IndexSearcher(reader);

Directory 负责提供文件属性的抽象API，IndexReader使用该API与存储于索引中的索引文件进行交互，并提供上层API方便IndexSearcher用于搜索。
注意：打开一个indexReader的开销比较大，它完成了打开索引文件等耗费系统资源的操作，因此最好在搜索期间使用同一个IndexReader实例，
只有在必要时才建议打开新的IndexReader。

在创建IndexReader时，它会检查已有的索引快照信息。如果你需要搜索索引中变更的信息，那么必须打开一个新的reader。
DirectoryReader.openIfChanged 方法是一个获取新IndexReader的有效手段，该方法工作原理：检查索引快照是否发生改变，如果发生改变则创建新的IndexReader，否则返回原reader。
代码案例：

IndexReader newReader = DirectoryReader.openIfChanged(oldReader);
if(reader != newReader) {
    reader.close();
    reader = newReader;
    searcher = new IndexSearcher(reader);
}

-> 搜索
获取到IndexSearcher实例之后，我们就可以通过调用其search()方法来进行搜索了。在程序后台，search方法会快速完成大量工作。
它会访问所有候选的搜索匹配文档，并只返回符合每个查询约束条件的结果。最后它会收集最靠前的几个搜索结果并返回给调用程序。
|-------------------------------------|-------------------------------------------------------------------------|
    IndexSearcher.search方法                              描述
 TopDocs search(Query query, int n)         直接进行搜索。int n 参数表示返回的评分最高的文档数量
   ...
|-------------------------------------|-------------------------------------------------------------------------|
大多数IndexSearcher的search方法都会返回TopDocs对象的形式来表示查询结果。

-> TopDocs类
TopDocs用来表示搜索结果，并且搜索结果是按照相关性排序的（每个结果文档域查询条件的匹配度进行排序，默认按照评分倒序排列）
|----------------------------|------------------------------------------------|
        TopDocs方法或属性                            返回值
    totalHits                       匹配搜索条件的文档数量
    scoreDocs                       包含搜索结果的ScoreDoc对象数组
    getMaxScore()                   返回结果集中最大评分
|----------------------------|------------------------------------------------|

-> 近实时搜索
正常情况下，我们的IndexSearcher只能搜索创建它时IndexReader读取到的索引快照范围。
何为近实时搜索呢？IndexWriter未提交的数据，通过某种方式也进行搜索。（很多时候，应用程序打开一个长期的IndexWriter进行索引增量操作）
如何实现？1. 要求搜索程序与索引程序为同一个进程程序。 2. DirectoryReader.open(writer) 获取一个IndexReader
（demo：NearRealTimeTest）

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第3部分 Lucene的多样化查询
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
-> 通过项进行搜索：TermQuery 类
对索引中特定项进行搜索是最基本的搜索方式。Term是最小的索引片段，每个Term包含了一个域名和一个文本值。
例子：
Term t = new Term("contents", "java");
Query query = new TermQuery(t);
使用这个TermQuery对象进行搜索，可以返回在contents域包含单词“java”的所有文档。注意：该查询值是区分大小写的。

TermQuery 在根据关键字查询文档时特别有用。如果文档特定域是通过StringField构建的，就可以精确查找特定文档。
例子：通过匹配ISBN号来检索特定文档 （demo）
注意：StringField域并不是唯一的，唯一性是在索引期间确定的。（即：你自己的程序构建索引时确定的）

-> 指定的项范围内搜索：TermRangeQuery 类
索引中的各个Term对象会按照字典序排列，并允许Lucene的TermRangeQuery对象提供的范围进行搜索。
        a         -->    文档1 文档2
        ab        -->    文档3 文档4
        abc       -->    文档5 文档6
    (skipList)
搜索时可以包含或者不包含 起始项 或 终止项，如果不包含则说明该端为无边界的。
比如说，一个空的lowerTerm意味着没有下边界，只要比上边界小的项都会被计算在内。
（demo：BasicSearchingTest.testTermRangeQuery()）

 TermRangeQuery query = new TermRangeQuery("title2", new BytesRef("d"), new BytesRef("j"), true, true);
 TermRangeQuery初始化方法中的两个Boolean对象参数表示是否包含搜索范围的起点和终点。
 该案例中两个参数都是true，表示包含起点和终点。

-> 指定数字范围内搜索：PointRangeQuery
 如果使用的是（IntPoint、LongPoint...）对象来索引域，那么就可以使用PointRangeQuery在某个特定范围内搜索该域。
 Lucene会在后台将提交的搜索范围转换为对等的“符号集”，底层对每个“符号”进行搜索，搜索结果做或运算（合并）。
 （demo：BasicSearchingTest.testPointRangeQuery / BasicSearchingTest.testPointRangeQuery2）
 1. IntPoint.newExactQuery 精确查询
 Query query = IntPoint.newExactQuery("age", 11);
 2. 范围查询，不包含边界
 query = IntPoint.newRangeQuery("age", Math.addExact(11, 1), Math.addExact(22, -1));
 3. 范围查询，包含边界
 query = IntPoint.newRangeQuery("age", 11, 22);

-> 通过字符串搜索：PrefixQuery 类
PrefixQuery 搜索包含指定字符串开头的项的文档。
（Demo：BasicSearchingTest.testPrefix）

-> 组合查询：BooleanQuery类
通过使用BooleanQuery类可以组合各种查询类型的Query为更复杂的查询方式。
BooleanQuery本身是一个Boolean子句（clauses）的容器，这个子句可以表示 逻辑“与”、逻辑“或”、逻辑“非” 的子查询。
API:
public void add(Query query, BooleanClause.Occur occur)
Occur对象可选值：BooleanClause.Occur.MUST (ps：必须)、BooleanClause.Occur.SHOULD （ps：可选项）、Boolean.Occur.MUST_NOT （ps：不能包含）
并且 BooleanQuery 对象还可以作为另外一个BooleanQuery对象的子句，这样就允许它们任意嵌套了。
（demo：BasicSearchingTest.testBooleanQuery / BasicSearchingTest.testOr）
BooleanQuery包含的查询子句是有数量限制的，默认情况下允许包含1024个查询子句。当子句数量超过最大限制值时，程序会抛出TooManyClauses异常。
如果你在一些特殊情况下需要增大查询子句的数量限制，可以使用BooleanQuery提供的clauseCount(int)方法进行设置。

-> 短语搜索：PhraseQuery
Lucene 索引会包含各个项所在域值的位置信息
例子：
This is nb   -> (This,0) (is, 1) (nb,2)
PhraseQuery可以根据这些位置信息定位某个距离范围内的项所对应的文档。
比如：“the quick brown fox jumped over the lazy”，即使我们不知道这个短语的完整写法，也一样可以通过查找域中quick和fox相关
并且距离很近的文档。
当然不使用PhraseQuery也可以通过组合TermQuery的方式查询出来该文档。
在本例中我们仅仅希望查询到域中quick紧邻fox（quick fox）或者 两者之间只有一个单词（quick [其它单词] fox）的文档。
（demo：PhraseQueryTest.testSlopComparison）
slop：两个项之间所允许的最大间隔距离成为 slop。这里的距离是指项要按顺序组成给定的短语所需要移动位置的次数。

在短语查询中，虽然项的先后顺序会对slop因子的选取产生一定影响，但我们不一定需要按照这些项在文档中的出现顺序来将它们
加入到PhraseQuery中。

            →1
短语：quick fox
          原文档：quick [brown] fox
        →3
短语：fox quick

slop因子：短语“quick fox” 需要slop值为1的移动才能和原文档匹配，而“fox quick” 需要slop值为3的移动才能匹配
(demo:PhraseQueryTest.testReverse)

--> 复合项短语查询
PhraseQuery 支持复合项短语，无论短语中有多少个项，slop因子都规定了按顺序移动项位置的总次数最大值。
（demo：PhraseQueryTest.testMultiple）

在QueryParser的分析表达式中，双引号里面的若干个项被转换成一个PhraseQuery对象。Slop因子的默认值是0，你可以通过
在表达式中加上~n去设置Slop。例如 "quick fox" ~3 的意思为：为quick和fox项生成一个slop因子为3的PhraseQuery对象。

-> 通配符查询：WildcardQuery 类
通配符查询可以让我使用不完整的、缺少某些字母的项进行查询，但是仍然可以查询到相关匹配结果。
Lucene使用两个标准的通配符：*代表0个或者多个字母。？代表0个或者1个字母。
（demo：WildcardQueryTest）
注意：当使用通配符进行查询时，可能会降低系统性能。较长的前缀（第一个通配符前面的字符）可以减少搜索枚举的项的个数。
如果以通配符为首的查询模式会强制枚举所有索引中的项以用于搜索匹配。

-> 搜索类似项：FuzzyQuery类
Lucene的模糊查询FuzzyQuery用于匹配与指定项相似的项。相似度算法采用的是 Levenshtein_Distance，这种算法被称为
编辑距离算法。它是两个字符串之间相似度的一个度量方法，编辑距离就是用来计算从一个字符串转换到另一个字符串所需的最少
插入、删除或替换的字母个数。
例如：“three” 和 “tree” 两个字符串的编辑距离为1，因为 “three” 只需要删除一个字母“h”，它们就一致了。
（demo：FuzzyQueryTest）
编辑距离能影响匹配结果的评分，编辑距离越小的项获得的评分就越高。
注意：FuzzyQuery会尽可能地枚举出一个索引中所有的项。因此，最好尽量少使用这类查询。

-> 匹配所有文档：MatchAllDocsQuery
顾名思义，就是匹配索引中所有文档。
用法：Query query = new MatchAllDocsQuery();
     TopDocs matches = searcher.search(query, num);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）

第4部分 解析查询表达式：QueryParser
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（开始）
尽管API创建查询对象很简单也很强大，但是如果所有的查询对象都必须通过Java代码显式构造的话，这也是不合理的。
通过使用查询表达式，Lucene的QueryParser可以创建前面介绍过的某一个Query子类。

查询表达式：+pubdata:[20100101 TO 20101231] Java AND (Lucene OR Apache)
查询含义：搜索2010年出版的关于Java、且内容中包含Lucene或Apache关键字的所有书籍。

-> Query.toString 方法
当查询表达式被QueryParser对象解析后，可能会发生一定的变化，如何知道发生了什么样的变化呢？
是否已经解析为所需的形式了呢？要看解析后的表达式，有一个途径就是使用Query类的toString()方法。
1. query.toString() 无参数的toString方法使用一个空的默认域名，程序会明确地输出全部项的域名
2. query.toString(String field) 查询条件中域field一致的项，将省略该项的域名打印
（demo：QueryParserTest.testToString）

-> TermQuery
单个词默认情况下如果不被识别为其它类型查询表达式的话，那么它将被QueryParser解析为单个TermQuery对象。
(demo：QueryParserTest.testTermQuery)

-> 项范围查询
针对文本或日期的范围查询所采用的是括号形式（[]、{}），只需要在查询范围两端之间用TO进行连接就可以了，TO必须大写。
括号的类型决定了是否包含开始项和结束项，中括号（[]）表示包含在内，花括号（{}）表示不包含在内。
注意：中括号和花括号不能混着使用，即不可以[}、{]。言外之意使用表达式之后，要么都包含在内，要么都不包含在内。
（demo：QueryParserTest.testTermRangeQuery）
注意：对于非日期范围的查询，Lucene会在用户输入查询范围后将查询边界转换为小写字母形式。
通过 parser.setLowercaseExpandedTerms(false) 可以解除强转策略。

-> 前缀查询和通配符查询
如果某个项中包含了一个星号（*）或问号（?），该项就会被看做是通配符查询对象WildcardQuery。
而当查询项只在末尾有一个星号时，QueryParser就会将它优化为前缀查询对象PrefixQuery。
注意：不管前缀查询还是通配符查询，查询表达式都会被转换为小写字母形式。不过该行为仍然可以控制。（parser.setLowercaseExpandedTerms(false)）
（demo：QueryParserTest.testLowercasing）
QueryParser转换Query对象时，默认情况下是不支持开端包含“通配符”的，可以调用setAllowLeadingWildcard方法解除限制。
需要注意的是会牺牲查询性能为代价。

-> 布尔操作符
可以使用AND、OR和NOT操作符通过QueryParser建立文本类型的布尔查询。这些布尔操作符必须使用大写形式。
列出的项之间如果没有指定布尔操作符，默认情况为OR。
例如："abc xyz" Lucene默认解析为 “abc OR xyz”
默认OR可以被修改为 AND ，通过parser.setDefaultOperator(QueryParser.AND_OPERATOR)。

查询项前面放NOT操作符将使程序进行不匹配该项的搜索操作。注意，针对某个项的否定操作必须与至少一个非否定项的操作联合起来才行。
即：我们不能使用 “NOT term” 的查询来匹配所有不包含该项的文档。

--> 布尔操作符快捷语法
|------------------------------|--------------------------------------|
            详细语法                            快捷语法
            a AND b                            +a +b
            a OR b                              a b
            a AND NOT b                        +a -b
|------------------------------|--------------------------------------|

-> 短语查询
查询表达式中用双引号扩起来的项Lucene将为它创建PhraseQuery。引号之间的文本将被进行分析。
分析结果可能不会和原始短语一样精确，因为分析器可能会吃掉其中的一些停用词。
例："\"This is Some Phrase*\"" 被StandardAnalyzer分析时，将被解析成短语 “some phrase” 构成的PhraseQuery对象。

还有一个问题，这里*为什么不被解析为通配符查询？ 双引号之间的文本Lucene会强制转换为PhraseQuery，单项短语被优化成为TermQuery对象。
（demo：QueryParserTest.testPhraseQuery）

QueryParser生成的PhraseQuery默认的slop因子为0，可以通过QueryParser.setPhraseSlop(int slop) 方法来改变这个默认因子。
查询表达式也可以通过波浪号（~）和预期的slop值来修改slop因子。
（demo：QueryParserTest.testSlop）

-> 模糊查询
波浪符（~）加在项的最后面，表示针对该项进行模糊查询。
（demo：QueryParserTest.testFuzzyQuery）

-> MatchAllDocsQuery
*:*会被QueryParser解析为 MatchAllDocsQuery
（demo：QueryParserTest.testMatchAllDocsQuery）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~（结束）